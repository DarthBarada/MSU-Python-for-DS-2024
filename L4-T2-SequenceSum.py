import pytest
"""
*-----------------------*---------------------------------------*
|   Ограничение времени |   1 секунда                           |
|   Ограничение памяти  |   64Mb                                |
|   Ввод                |   стандартный ввод или input.txt      |
|   Вывод               |   стандартный вывод или output.txt    |
*-----------------------*---------------------------------------*

В задачах на обработку последовательностей числа с клавиатуры вводятся одним из двух способов:

1. Программу заранее предупреждают о предстоящем количестве чисел. В этом случае количество чисел обычно даётся в первой строке.
Программа сразу получает на вход элементы последовательности, не зная заранее о её длине. В качестве сигнала о конце последовательности используется некоторое терминальное значение или терминатор.
2. В данной задаче дана последовательность чисел, оканчивающаяся нулём. То есть ноль является терминальным элементом и не входит в анализируемый набор чисел.

Вычислить количество и сумму таких чисел данной последовательности, в двоичном представлении которых ровно три значащих нуля.
"""

def test_example():
    assert processSequence([20, 24, 8]) == (3, 52)
    assert processSequence([]) == (0, 0)
    assert processSequence([7, 24, 8]) == (2, 32)


def processSequence(seq:list[int])-> tuple[int,int]:
    seq = list(filter(lambda num: bin(num)[2:].count("0") == 3, seq))
    return len(seq), sum(seq)


def main() -> None:
    inp:list[int] = []
    number = int(input())
    while number != 0:
        inp.append(number)
        number = int(input())
    
    print(*processSequence(inp))


if __name__ == "__main__":
    main()
