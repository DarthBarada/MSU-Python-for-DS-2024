import pytest
"""
*-----------------------*---------------------------------------*
|   Ограничение времени |   1 секунда                           |
|   Ограничение памяти  |   64Mb                                |
|   Ввод                |   input.csv                           |
|   Вывод               |   стандартный вывод или output.txt    |
*-----------------------*---------------------------------------*

# Описание
В спортивном клубе "Две чугунные гири" есть два типа клиентов: 
    * одни из них всегда делают примерно одинаковое количество подходов, планомерно развивая свои физические способности,
    * другие же часто ленятся и делают существенно меньше, чем нужно, а затем их мучает совесть, и они начинают делать существенно больше. 
Внимательные тренеры ведут скрупулезные и подробные записи о каждом посетителе клуба. Отличить одних от других можно при помощи подсчета стандартного отклонения по статистике количества сделанных подходов за последние дни. Нормальным разбросом вокруг среднего значения подходов для последовательных посетителей считается +/- 4 подхода. 

По записям за последние 35 35 дней определите кого в клубе больше — клиентов 1 или 2 типа. Гарантируется, что одних из них строго больше.

# Формат ввода
В файле input.csv содержатся записи о подходах, сделанных клиентами за последние 35 дней. Массив содержит N строк и 35 столбцов, где N — это количество спортсменов в клубе.

# Формат вывода
В стандартный поток вывода или в файл output.txt запишите единственное число 1 или 2 2, в зависимости от Вашего решения. Если в клубе больше спортсменов, совершающих примерно одно и то же число подходов, запишите 1, иначе — запишите 2.

# Примечания
1. Разделитель в файле input.csv — запятая без пробелов.
2. Использование numpy является обязательным!
3. Для подсчета разброса вокруг среднего значения подходов воспользуйтесь функцией библиотеки numpy:
    * numpy.std().
"""

def test_example():
    ...


def main() -> None:
    import numpy as np
    data = np.genfromtxt("input.csv", dtype=float, delimiter=',')
    std_devs = np.std(data, axis=1)
    type_1_count = np.sum(std_devs <= 4)
    type_2_count = np.sum(std_devs > 4)
    if type_1_count > type_2_count:
        print("1")
    else:
        print("2")


if __name__ == "__main__":
    main()
