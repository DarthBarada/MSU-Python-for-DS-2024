import pytest
"""
*-----------------------*---------------------------------------*
|   Ограничение времени |   1 секунда                           |
|   Ограничение памяти  |   64Mb                                |
|   Ввод                |   стандартный ввод или input.txt      |
|   Вывод               |   стандартный вывод или output.txt    |
*-----------------------*---------------------------------------*

Вася покупает акции Фиговой компании. В первой строке даны два числа limit и N, где limit — это максимальная цена, которую Вася готов заплатить за одну акцию, а N — количество дней, в течение которых Вася будет покупать акции.

Далее следуют N строк, соответствующих N дням. В каждой строке находится ряд слов из пар чисел в формате 123/45. Это означает, что 45 акций выставлены по цене 123 рубля за штуку.

Вася покупает в течение дня только один слот акций — самый дешёвый, при этом только если они стоят не дороже limit рублей (включительно). Обратите внимание, что акции в самом дешёвом слоте за день могут быть не самыми дешёвыми, так как стоимость слота акций равна произведению их стоимости на их количество.

Необходимо посчитать минимальное количество рублей, которое необходимо Васе для покупки всех акции согласно данной стратегии.
"""

def test_example():
    assert goodStrategy([(120,10) ,(80,20)], 100) == (80,20)
    assert goodStrategy([(120,10), (110,10), (130,10), (120,15)], 100) is None
    assert goodStrategy([(100,10),(110,15),(95,25)], 100) == (100,10)
    assert goodStrategy([(90,10),(80,20),(85,15)], 100) == (90,10)
    
    assert getGoodStrategyMoney(
        [
            [(120,10) ,(80,20)],
            [(120,10), (110,10), (130,10), (120,15)],
            [(100,10),(110,15),(95,25)],
            [(90,10),(80,20),(85,15)]
        ],
        100
    ) == 3500

def goodStrategy(prices: list[tuple[int, int]], limit: int) -> tuple[int, int]:
    try:
        return min(
            filter(lambda t: t[0] <= limit, prices), 
            key=lambda t: t[0] * t[1]
        )
    except:
        return None

def getGoodStrategyMoney(prices: list[list[tuple[int, int]]], limit: int) -> int:
    gs = [goodStrategy(s, limit) for s in prices]
    return sum([t[0] * t[1] for t in gs if t is not None])

def main() -> None:
    limit, N = map(int, input().split())
    
    money = getGoodStrategyMoney(
        [
            [
                tuple(
                    map(
                        int,
                        stock.split("/")
                    )
                ) for stock in input().split()
            ] for _ in range(N)
        ],
        limit
    )
    
    print(money)


if __name__ == "__main__":
    main()
